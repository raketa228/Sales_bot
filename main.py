#–ø–æ–¥–∫–ª—é—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import time
import re
import math
import random
from datetime import datetime
from datetime import timedelta
import uuid
new_code = uuid.uuid4().hex # –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω–æ–≥–æ –∫–æ–¥–∞ / –∫—É–ø–æ–Ω–∞


import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types
from aiogram.types import ContentType, ParseMode, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButtonPollType, PollType, PollAnswer
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text, Regexp
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
import sqlite3

# –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot = Bot(token='1506104835:AAHmaJwI2XLM7vB-JHrnuXJucauwmDBIusQ')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

now = datetime.now()
global is_logo
is_logo = False


#—Ñ—É–Ω–∫—Ü–∏–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
# —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑—É
def send_to_db(text, input_t):
	conn = sqlite3.connect('game.db')
	cur = conn.cursor()
	cur.execute(text, input_t)
	conn.commit()

# —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –±–∞–∑—ã
def get_from_db(text, input_t):
	conn = sqlite3.connect('game.db')
	cur = conn.cursor()
	cur.execute(text, input_t)
	return cur.fetchall()
	conn.commit()

# —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —é–∑–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ ID
def get_user_by_id(sender_id):
	user = get_from_db('SELECT * FROM subscribers WHERE id = ?', (int(sender_id), ))
	return user[0]


# —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async def check_user_subscribe(sender_id):
	b = await bot.get_chat_member(chat_id='-1001465373630', user_id=sender_id)
	if b.status == 'left':
		return False
	else:
		return True


# —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def create_keyboard(keys: list, row_width: int):
	keyboard = []
	for key in keys:
		keyboard.append(KeyboardButton(key))
	return ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=row_width).add(*keyboard)

def create_inline_keyboard(keys: dict, row_width: int):
	keyboard = []
	for key in keys.keys():
		keyboard.append(InlineKeyboardButton(key, callback_data=keys[key]))
	return InlineKeyboardMarkup(one_time_keyboard=True, row_width=row_width).add(*keyboard)


# —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_main_msg(sender_id):
	list_admins = list()
	admins = get_from_db('SELECT * FROM admins', ())
	for admin in admins:
		list_admins.append(admin[0])
	if int(sender_id) in list_admins:
		main_markup = create_keyboard(['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üéÆ –ò–≥—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞', 'üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏', 'üîÅ –ü–µ—Ä–µ–≤–æ–¥ —É—Ä–æ–≤–Ω—è –≤ —Å–∫–∏–¥–∫–∏', 'üìÑ –ü—Ä–∞–≤–∏–ª–∞', '‚òëÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É–ø–æ–Ω', 'üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'], 2)
	else:
		main_markup = create_keyboard(['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üéÆ –ò–≥—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞', 'üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏', 'üîÅ –ü–µ—Ä–µ–≤–æ–¥ —É—Ä–æ–≤–Ω—è –≤ —Å–∫–∏–¥–∫–∏', 'üìÑ –ü—Ä–∞–≤–∏–ª–∞'], 2)
	await bot.send_message(sender_id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_markup)

# —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
async def send_profile(sender_id):
	profile_markup = create_keyboard(['üóí –ú–æ–∏ –∫—É–ø–æ–Ω—ã', '‚Ü© –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'], 2)
	finded_user = get_user_by_id(str(sender_id))
	logo = get_user_by_id(str(sender_id))[4]
	max_xp = get_from_db('SELECT * FROM level_data WHERE level = ?', (finded_user[2], ))[0][1]
	if max_xp == 'MAX':
		text = f'<b>üåÄ {finded_user[1]} üåÄ</b>\n„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\nüì∂ –£—Ä–æ–≤–µ–Ω—å:<code> {finded_user[2]}</code>\n‚≠êÔ∏è –û–ø—ã—Ç:<code> {max_xp}</code> XP'
	else:
		text = f'<b>üåÄ {finded_user[1]} üåÄ</b>\n„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\nüì∂ –£—Ä–æ–≤–µ–Ω—å:<code> {finded_user[2]}</code>\n‚≠êÔ∏è –û–ø—ã—Ç:<code> {finded_user[3]}/{max_xp}</code> XP'

	
	await bot.send_photo(sender_id, logo, caption=text, reply_markup=profile_markup, parse_mode='html')

# —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ–Ω–∏—è –æ–ø—ã—Ç–∞
async def add_xp(user_id, xp_plus: int):
	user = get_user_by_id(int(user_id))
	level_user = user[2]
	xp_user = user[3]
	max_xp_for_lvl = int(get_from_db('SELECT * FROM level_data WHERE level = ?', (level_user, ))[0][1])
	sum_xp = xp_user + xp_plus
	if sum_xp >= max_xp_for_lvl:
		while sum_xp >= max_xp_for_lvl:
			max_xp_for_lvl = int(get_from_db('SELECT * FROM level_data WHERE level = ?', (level_user, ))[0][1])
			sum_xp -= max_xp_for_lvl
			level_user += 1
			test = get_from_db('SELECT * FROM level_data WHERE level = ?', (level_user, ))[0][1]
			try:
				int(test)
			except:
				level_user = 50
		if user[5] != 'False' and level_user == 5:
			await bot.send_message(user[5], f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <i>{user[1]}</i>, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ, –¥–æ—Å—Ç–∏–≥ 5-–≥–æ —É—Ä–æ–≤–Ω—è! –ó–∞ —ç—Ç–æ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å <code>25</code> XP', parse_mode='html')
			await add_xp(user[5], 25)
			await bot.send_message(user_id, '–¢—ã –¥–æ—Å—Ç–∏–≥ 5-–≥–æ —É—Ä–æ–≤–Ω—è! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üéâ')
		elif level_user == 50:
			await bot.send_message(user_id, 'üéâ –¢–´ –î–û–°–¢–ò–ì –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ì–û –£–†–û–í–ù–Ø!!!!! üéâ')
		else:
			await bot.send_message(user_id, f'–¢—ã –¥–æ—Å—Ç–∏–≥ {level_user}-–≥–æ —É—Ä–æ–≤–Ω—è! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üéâ')
		
		send_to_db('UPDATE subscribers SET level = ? WHERE id = ?', (level_user, int(user_id)))
	send_to_db('UPDATE subscribers SET xp = ? WHERE id = ?', (sum_xp, int(user_id)))
	user = get_user_by_id(int(user_id))
	level_user = user[2]
	xp_user = user[3]
	await send_main_msg(user_id)

# —Ñ—É–Ω–∫—Ü–∏—è –≤–∏–∫—Ç—Ä–∏–Ω—ã
async def quiz(sender_id, genre: str, count: int):
	if genre == '':
		quizzes = get_from_db('SELECT * FROM quiz', ())
	else:
		quizzes = get_from_db('SELECT * FROM quiz WHERE genre = ?', (genre, ))
	random_question = random.choice(quizzes)
	answers = random_question[2].split(';')
	random.shuffle(answers)
	index_rigth_answer = answers.index(random_question[1])
	if random_question[4] != None:
		await bot.send_photo(sender_id, random_question[4])
	my_quiz = await bot.send_poll(sender_id, f'{count}. {random_question[0]}?', answers, type='quiz', correct_option_id=index_rigth_answer,
		explanation=random_question[3], is_anonymous=False, explanation_parse_mode='html')
	return my_quiz

# —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –±–æ–Ω—É—Å–∞
async def send_coupon(sender_id, level: int):
	global new_code
	new_code = uuid.uuid4().hex				# –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–∏—Ä–∏—á–Ω–æ–≥–æ –∫–æ–¥–∞ / –∫—É–ø–æ–Ω–∞
	user = get_user_by_id(int(sender_id))
	name = user[1]
	sale = (level/5)*3
	level_user = user[2]
	level_user -= level
	
	if str(sale)[-1] == '0':
		sale_print = int(sale)
	else:
		sale_print = round(sale, 2)
	send_to_db('UPDATE subscribers SET level = ? WHERE id = ?', (level_user, int(sender_id)))
	send_to_db('INSERT INTO coupons VALUES(?, ?, ?, ?, ?)', (new_code, sender_id, name, sale_print, 1))
	await bot.send_message(sender_id, f'–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å —Å–Ω–∏–∑–∏–ª—Å—è –¥–æ <code>{level_user}-–≥–æ</code>\n–í–æ—Ç –∫–æ–¥ —Ç–≤–æ–µ–≥–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –∫—É–ø–æ–Ω–∞ –Ω–∞ {sale_print}%:\n<i>(–ù–∞–∂–º–∏ –Ω–∞ –∫–æ–¥, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)</i>\n<code>{new_code}</code>.\n\n<i>(–ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫–ª—é—á–∞ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –ø—Ä–∏—à–ª–∏ —ç—Ç–æ—Ç –∫–æ–¥ –µ–º—É)</i>', parse_mode='html')
	await send_main_msg(sender_id)

def is_forward(message):
	try:
		from_id = message.forward_from.id
		return from_id
	except AttributeError:
		return False


'''

list_xp_for_levels = list()
for n in range(1, 51):
	num = math.ceil(10 * 1.2 ** (n - 1))
	num_l = int('-' + str(len(str(num)) - 2))
	list_xp_for_levels.append(int(round(num, num_l)))

print(str(list_xp_for_levels) + '/n' + str(len(list_xp_for_levels)))
n = 1
for i in list_xp_for_levels:
	print(i)
	cur.execute('INSERT INTO level_data VALUES(?, ?);', (n, i))
	n += 1				message.poll.correct_option_id
'''

# —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Form(StatesGroup):
	username = State()
	how_many_level_to_sales = State()
	forwaded_msg = State()
	coupon_form = State()
	msg_send_to_all = State()
	level_rate = State()



@dp.message_handler(regexp=r'/start buy')
async def new_referal_user(message: types.Message, state: FSMContext):
	print('test')
# –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º —Å—Å—ã–ª–∫–∞–º
@dp.message_handler(regexp=r'/start \d{7,12}_referal')
async def new_referal_user(message: types.Message, state: FSMContext):
	if await check_user_subscribe(message.chat.id):
		sender_id = re.findall(r"\d{7,12}", message.text)[0]
		try:
			sender = get_user_by_id(str(sender_id))[1]
			is_new_user = get_from_db('SELECT * FROM subscribers WHERE id = ?', (str(message.chat.id), ))
			global is_referal
			is_referal = str(sender_id)
			if str(sender_id) == str(message.chat.id):
				await message.answer('‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ –ø–æ —Å–≤–æ–µ–π –∂–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π\n—Å—Å—ã–ª–∫–µ! ‚ùå')
			else:
				if is_new_user == []:
					await message.answer(f'–ü—Ä–∏–≤–µ—Ç! –¢—ã –∂–µ –æ—Ç <u>{sender}</u>, –ø—Ä–∞–≤–∏–ª—å–Ω–æ?', parse_mode='html')
					await message.answer('–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!')
					time.sleep(0.75)
					await message.answer('–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è!')
					await bot.send_message(sender_id, '–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à–ª–∏ –∏ —Å–µ–π—á–∞—Å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è!')
					await Form.username.set()
				else:
					await message.answer(f'‚ùå –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ü–µ—Ä–µ–¥–∞–π <i>{sender}</i>,\n—á—Ç–æ–±—ã –ø–æ –µ–≥–æ —Å—Å—ã–ª–∫–∞–º —Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å <b>–ù–û–í–´–ï</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏! ‚ùå', parse_mode='html')
		except IndexError:
			await message.answer('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ ‚ùå')
	else:
		await message.answer('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª', reply_markup=InlineKeyboardMarkup(row_width=2, one_time_keyboard=True).add(InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url='https://t.me/joinchat/p8RgHuKqCH8xZjhi')))


# –ø—Ä–∏–≤–µ—Ç—Å–≤–∏–µ
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
	if await check_user_subscribe(message.chat.id):
		await message.answer('–ü—Ä–∏–≤–µ—Ç!')
		finded_user = get_from_db('SELECT * FROM subscribers WHERE id = ?', (str(message.chat.id), ))
		
		if finded_user == []:
			global is_referal
			is_referal = 'False'
			await message.answer('–¢—ã –∂–µ –Ω–æ–≤–∏—á–æ–∫, –¥–∞?\n–¢–æ–≥–¥–∞ –¥–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!')
			time.sleep(0.75)
			await message.answer('–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è!')
			await Form.username.set()
		else:
			await message.answer('–ö–∞–∫ –ø—Ä–∏—è—Ç–Ω–æ –≤–µ—Ä–Ω—É—Ç—Å—è –¥–æ–º–æ–π! –°–∫–∞–∂–∏?')
			await send_main_msg(message.chat.id)
	else:
		await message.answer('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª', reply_markup=InlineKeyboardMarkup(row_width=2, one_time_keyboard=True).add(InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url='https://t.me/joinchat/p8RgHuKqCH8xZjhi')))


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
@dp.message_handler(content_types=ContentType.PHOTO)
async def new_photo(message: types.Message):
	if await check_user_subscribe(message.chat.id):
		if get_user_by_id(message.chat.id)[4] == None:
			name = get_user_by_id(message.chat.id)[1]
			send_to_db('DELETE FROM subscribers WHERE id = ?', (message.chat.id, ))
			new_user = (str(message.chat.id), name, 1, 0, message.photo[0]['file_id'], is_referal)
			send_to_db('INSERT INTO subscribers VALUES(?, ?, ?, ?, ?, ?);', new_user)
			await send_main_msg(message.chat.id)
			is_logo = False
		else:
			print(message.photo[0].file_id)
	else:
		await message.answer('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª', reply_markup=InlineKeyboardMarkup(row_width=2, one_time_keyboard=True).add(InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url='https://t.me/joinchat/p8RgHuKqCH8xZjhi')))



# —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
cancel_markup = create_keyboard(['üö´ –û—Ç–º–µ–Ω–∞'], 1)
games_markup = create_keyboard(['‚ùî –í–∏–∫—Ç–æ—Ä–∏–Ω—ã ‚ùì', 'üé≤ –ò–≥—Ä–∞ –Ω–∞ —É–¥–∞—á—É', '‚Ü© –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'], 2)
quiz_markup = create_keyboard(['üî´ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ –±–æ–µ–≤–∏–∫–∞–º (–ú–∞–∫—Å. +14 XP)', 'üëæ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ —Å—Ç–∞—Ä—ã–º –∏–≥—Ä–∞–º (–ú–∞–∫—Å. +14 XP)', 'üëª –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ —Ö–æ—Ä—Ä–æ—Ä–∞–º (–ú–∞–∫—Å. +14 XP)', 'üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º (–ú–∞–∫—Å. +14 XP)', 'üß± –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞–º (–ú–∞–∫—Å. +14 XP)', 'üèÅ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–º –∏–≥—Ä–∞–º (–ú–∞–∫—Å. +14 XP)', 'üïπ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ –≤—Å–µ–º –∂–∞–Ω—Ä–∞–º (–ú–∞–∫—Å. +20 XP)', '‚Ü© –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∏–≥–æ—Ä'], 1)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
@dp.message_handler(content_types=ContentType.TEXT)
async def message_send(message: types.Message):
	if await check_user_subscribe(message.chat.id):
		if message.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
			await send_profile(message.chat.id)
		elif message.text == 'üéÆ –ò–≥—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞':
			await message.answer('–í–æ —á—Ç–æ —Å—ã–≥—Ä–∞–µ–º?', reply_markup=games_markup)
		elif message.text == '‚ùî –í–∏–∫—Ç–æ—Ä–∏–Ω—ã ‚ùì':
			await message.answer('–í –∫–∞–∫—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å?', reply_markup=quiz_markup)
		elif message.text == '‚Ü© –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∏–≥–æ—Ä':
			await message.answer('–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é...', reply_markup=games_markup)
		elif message.text == 'üèÅ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–º –∏–≥—Ä–∞–º (–ú–∞–∫—Å. +14 XP)':
			global max_question
			max_question = 7
			global count_correct
			count_correct = 0
			global count
			count = 1
			global genre
			genre = 'sport'
			global this_quiz
			this_quiz = await quiz(message.chat.id, genre, count)
		elif message.text == 'üéØ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º (–ú–∞–∫—Å. +14 XP)':
			max_question = 7
			count_correct = 0
			count = 1
			genre = 'action'
			this_quiz = await quiz(message.chat.id, genre, count)
		elif message.text == 'üî´ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ –±–æ–µ–≤–∏–∫–∞–º (–ú–∞–∫—Å. +14 XP)':
			max_question = 7
			count_correct = 0
			count = 1
			genre = 'thriller'
			this_quiz = await quiz(message.chat.id, genre, count)
		elif message.text == 'üëæ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ —Å—Ç–∞—Ä—ã–º –∏–≥—Ä–∞–º (–ú–∞–∫—Å. +14 XP)':
			max_question = 7
			count_correct = 0
			count = 1
			genre = 'old'
			this_quiz = await quiz(message.chat.id, genre, count)
		elif message.text == 'üëª –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ —Ö–æ—Ä—Ä–æ—Ä–∞–º (–ú–∞–∫—Å. +14 XP)':
			max_question = 7
			count_correct = 0
			count = 1
			genre = 'horror'
			this_quiz = await quiz(message.chat.id, genre, count)
		elif message.text == 'üß± –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞–º (–ú–∞–∫—Å. +14 XP)':
			max_question = 7
			count_correct = 0
			count = 1
			genre = 'simulator'
			this_quiz = await quiz(message.chat.id, genre, count)
		elif message.text == 'üïπ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ –≤—Å–µ–º –∂–∞–Ω—Ä–∞–º (–ú–∞–∫—Å. +20 XP)':
			max_question = 7
			count_correct = 0
			count = 1
			genre = ''
			this_quiz = await quiz(message.chat.id, genre, count)


		elif message.text == 'üé≤ –ò–≥—Ä–∞ –Ω–∞ —É–¥–∞—á—É':
			await message.answer('<b>–ü—Ä–∞–≤–∏–ª–∞</b>\n\n–¢—ã –≤—ã–±–∏—Ä–∞–µ—à—å —Å–∫–æ–ª—å–∫–æ —Å–≤–æ–∏—Ö —É—Ä–æ–≤–Ω–µ–π —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å (<i>–ú–∏–Ω–∏–º—É–º ‚Äî 2</i>), –∏ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é <code>50%</code>, —Ç—ã –ª–∏–±–æ —Ç–µ—Ä—è–µ—à—å —Å–≤–æ–∏ —É—Ä–æ–≤–Ω–∏, –ª–∏–±–æ —É–¥–≤–∞–∏–≤–∞–µ—à—å –∏—Ö', parse_mode='html')
			time.sleep(0.75)
			await message.answer(f'–°–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å?\n(–°–µ–π—á–∞—Å —É —Ç–µ–±—è {get_user_by_id(message.chat.id)[2]} —É—Ä–æ–≤–Ω–µ–π)', reply_markup=cancel_markup)
			await Form.level_rate.set()


		elif message.text == 'üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏':
			referal_links_markup = create_keyboard(['üÜï –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É', '‚Ü© –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'], 1)
			await message.answer('–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?', reply_markup=referal_links_markup)
		elif message.text == 'üÜï –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É':
			ref_link_markup = create_inline_keyboard({'üåê –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å':'copy_ref_link'}, 1)
			global result_url
			result_url = f'https://t.me/game_sales_keys_bot?start={message.chat.id}_referal'
			await message.answer(f'<a href="{result_url}">–í–æ—Ç</a> —Å—Å—ã–ª–∫–∞', parse_mode='html', reply_markup=ref_link_markup)

		elif message.text == 'üîÅ –ü–µ—Ä–µ–≤–æ–¥ —É—Ä–æ–≤–Ω—è –≤ —Å–∫–∏–¥–∫–∏':

			await message.answer('–°–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π —Ç—ã —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —Å—ã–∫–∏–¥–∫—É?\n<i>(–º–∏–Ω–∏–º—É–º ‚Äî 5 —É—Ä–æ–Ω–µ–π)</i>', parse_mode='html', reply_markup=cancel_markup)
			await Form.how_many_level_to_sales.set()
		elif message.text == '‚òëÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É–ø–æ–Ω':
			list_admins = list()
			admins = get_from_db('SELECT * FROM admins', ())
			for admin in admins:
				list_admins.append(admin[0])
			if message.chat.id in list_admins:
				await message.answer('–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω –ø—Ä–∏—Å–ª–∞–ª –∫—É–ø–æ–Ω', reply_markup=cancel_markup)
				await Form.forwaded_msg.set()
			else:
				pass
		elif message.text == 'üóí –ú–æ–∏ –∫—É–ø–æ–Ω—ã':
			
			coupons = get_from_db('SELECT * FROM coupons WHERE owner_id=?', (message.chat.id, ))
			global list_coupons
			list_coupons = list()
			for coupon in coupons:
				list_coupons.append(f'{coupon[3]}% ‚Äî {coupon[0]}')
			if len(list_coupons) == 0:
				await message.answer('–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫—É–ø–æ–Ω–æ–≤', reply_markup=create_keyboard(['üóí –ú–æ–∏ –∫—É–ø–æ–Ω—ã', '‚Ü© –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'], 2))
			else:
				global coupons_markup
				coupons_markup = create_keyboard(list_coupons, row_width=1).add('üö´ –û—Ç–º–µ–Ω–∞')
				await message.answer('–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∫—É–ø–æ–Ω–æ–≤:', reply_markup=coupons_markup)
				close_markup = create_inline_keyboard({'–ó–∞–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∫—É–ø–æ–Ω–æ–≤':'close_list'}, row_width=1)
				
				await message.answer('–ó–∞–∫—Ä—ã—Ç—å?', reply_markup=close_markup)
				await Form.coupon_form.set()
		elif message.text == 'üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º':
			list_admins = list()
			admins = get_from_db('SELECT * FROM admins', ())
			for admin in admins:
				list_admins.append(admin[0])
			if message.chat.id in list_admins:
				await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞', reply_markup=cancel_markup)
				await Form.msg_send_to_all.set()
			else:
				pass

		elif message.text == '‚Ü© –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
			await send_main_msg(message.chat.id)
	else:
		await message.answer('–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–æ—Ç–æ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª', reply_markup=InlineKeyboardMarkup(row_width=2, one_time_keyboard=True).add(InlineKeyboardButton('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url='https://t.me/joinchat/p8RgHuKqCH8xZjhi')))




@dp.poll_answer_handler()
async def handle_poll_answer(quiz_answer: PollAnswer):
	global this_quiz
	if this_quiz.poll.correct_option_id == quiz_answer.option_ids[0]:
		global count_correct
		count_correct += 1
	else:
		pass
	global count
	count += 1
	global max_question
	if count > max_question:
		if count_correct == max_question:
			await bot.send_message(quiz_answer.user.id, f'üíØ –¢—ã <u>–ò–î–ï–ê–õ–¨–ù–û</u> –ø—Ä–æ—à—ë–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É! –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ <code>{count_correct*2}</code> XP üèÜ', parse_mode='html')
		else:
			if math.ceil(max_question/2) > count_correct:
				emoji = 'üìâ'
			else:
				emoji = 'üìà'
			await bot.send_message(quiz_answer.user.id, f'{emoji} –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <code>{count_correct}/{max_question}</code>. –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ <code>{count_correct*2}</code> XP üéâ', parse_mode='html')
		await add_xp(quiz_answer.user.id, count_correct*2)
	else:
		await bot.send_chat_action(quiz_answer.user.id, 'typing')
		time.sleep(1.5)
		global genre
		this_quiz = await quiz(quiz_answer.user.id, genre, count)



# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –º–∞—à–∏–Ω—ã —Å–æ—Å–æ—è–Ω–∏–π

#–¥–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª –∑–∞–ø–æ–ª–Ω—è—Ç—å
@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='üö´ –û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
	current_state = await state.get_state()
	await state.finish()

	msg = await message.reply('–û—Ç–º–µ–Ω—è—é')
	text = msg.text
	start_text = msg.text
	time.sleep(0.3)
	i = 1
	while i < 12:
		if i == 4 or i == 8:
			text = start_text
		else:
			text = text + '.'
		await bot.edit_message_text(chat_id=message.chat.id, message_id=msg.message_id, text=text)
		time.sleep(0.3)
		i += 1
	await send_main_msg(message.chat.id)



@dp.message_handler(state=Form.username)
async def new_username_process(message: types.Message, state: FSMContext):
	is_name_taken = get_from_db('SELECT * FROM subscribers WHERE username = ?', (message.text, ))
	if is_name_taken == []:
		global new_name
		new_name = message.text
		await message.answer('–û—Ç–ª–∏—á–Ω–æ! –ê —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ—é –±—É–¥—É—â—É—é –∞–≤–∞—Ç–∞—Ä–∫—É')
		new_user = (str(message.chat.id), message.text, 1, 0, None, is_referal)
		send_to_db('INSERT INTO subscribers VALUES(?, ?, ?, ?, ?, ?);', new_user)
		await state.finish()
	else:
		await message.answer('–≠—Ç–æ –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ!')
		await message.answer('–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è!')
		await Form.username.set()



@dp.message_handler(lambda message: message.text.isdigit() == False, state=Form.how_many_level_to_sales)
async def process_how_many_level_to_sales_invalid1(message: types.Message):
	return await message.answer('‚ùå –≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ! ‚ùå')

@dp.message_handler(lambda message: int(message.text) > get_user_by_id(message.chat.id)[2], state=Form.how_many_level_to_sales)
async def process_how_many_level_to_sales_invalid2(message: types.Message):
	return await message.answer('‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –±–æ–ª—å—à–µ —É—Ä–æ–≤–Ω–µ–π, —á–µ–º —É —Ç–µ–±—è –µ—Å—Ç—å! ‚ùå')

@dp.message_handler(lambda message: int(message.text) < 5, state=Form.how_many_level_to_sales)
async def process_how_many_level_to_sales_invalid3(message: types.Message):
	await message.answer('‚ùå –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –º–µ–Ω—å—à–µ 5-—Ç–∏ —É—Ä–æ–≤–Ω–µ–π ‚ùå')

@dp.message_handler(state=Form.how_many_level_to_sales)
async def new_level_process(message: types.Message, state: FSMContext):
	await send_coupon(message.chat.id, int(message.text))
	await state.finish()



@dp.message_handler(lambda message: is_forward(message) == False, state=Form.forwaded_msg)
async def forward_msg_process_inavalid(message: types.Message, state: FSMContext):
	return await message.answer('‚ùå –≠—Ç–æ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚ùå')

@dp.message_handler(state=Form.forwaded_msg)
async def forward_msg_process(message: types.Message, state: FSMContext):
	from_id = is_forward(message)
	owner = get_from_db('SELECT * FROM coupons WHERE id = ?', (message.text, ))
	try:
		owner = owner[0]
		global coupon_id
		coupon_id = message.text
		if message.forward_from.id == owner[1]:
			use_markup = create_inline_keyboard({'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫—É–ø–æ–Ω':'use_coupon'}, 1)
			await message.answer(f'‚úÖ –ö—É–ø–æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {owner[2]} ‚úÖ', reply_markup=use_markup)
		else:
			await message.answer('‚ùå –≠—Ç–æ—Ç –∫—É–ø–æ–Ω–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –µ–≥–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç ‚ùå')
	except IndexError:
		await message.answer('‚ùå –¢–∞–∫–æ–π –∫—É–ø–æ–Ω –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚ùå')
	await send_main_msg(message.chat.id)
	await state.finish()



@dp.message_handler(lambda message: message.text not in list_coupons, state=Form.coupon_form)
async def coupon_process_inavalid(message: types.Message, state: FSMContext):
	return await message.answer('–¢–∞–∫–æ–≥–æ –∫—É–ø–æ–Ω–∞ –Ω–µ—Ç. –í—ã–±–µ—Ä–∏ –∫—É–ø–æ–Ω –∫–Ω–æ–ø–∫–æ–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ', reply_markup=coupons_markup)

@dp.message_handler(state=Form.coupon_form)
async def coupon_process(message: types.Message, state: FSMContext):
	copy_code_markup = create_inline_keyboard({'üîó –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –∫—É–ø–æ–Ω–∞':'copy_code_coupon'}, row_width=1)
	await message.answer('–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫—É–ø–æ–Ω?', reply_markup=copy_code_markup)
	global new_code
	new_code = message.text[message.text.rindex(' ') + 1:]
	await state.finish()



@dp.message_handler(state=Form.msg_send_to_all)
async def send_msg_process(message: types.Message, state: FSMContext):
	text = message.text
	subscribers = get_from_db('SELECT * FROM subscribers', ())
	await bot.send_chat_action(message.chat.id, 'typing')
	for subsriber in subscribers:
		await bot.send_message(subsriber[0], text)
	time.sleep(0.5)
	await message.answer('–ì–æ—Ç–æ–≤–æ!')
	await state.finish()



@dp.message_handler(lambda message: message.text.isdigit() == False, state=Form.level_rate)
async def process_level_rate_invalid1(message: types.Message):
	return await message.answer('‚ùå –≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ! ‚ùå')

@dp.message_handler(lambda message: int(message.text) < 2, state=Form.level_rate)
async def process_level_rate_invalid1(message: types.Message):
	return await message.answer('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Å—Ç–∞–≤–∫–∏ ‚Äî <code>2</code> ‚ùå', parse_mode='html')

@dp.message_handler(lambda message: int(message.text) > get_user_by_id(message.chat.id)[2], state=Form.level_rate)
async def process_level_rate_invalid1(message: types.Message):
	return await message.answer('‚ùå –ù–µ–ª—å–∑—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —É—Ä–æ–≤–Ω–µ–π, —á–µ–º —É —Ç–µ–±—è –µ—Å—Ç—å ‚ùå', parse_mode='html')

@dp.message_handler(state=Form.level_rate)
async def level_rate_process(message: types.Message, state: FSMContext):
	user = get_user_by_id(message.chat.id)
	global level_user
	level_user = user[2]
	global rate
	rate = int(message.text)
	if rate == level_user:
		sure_markup = create_inline_keyboard({'‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å':'yes_sure', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å':'no_sure'}, row_width=2)
		await message.answer('–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –í–°–ï —Å–≤–æ–∏ —É—Ä–æ–≤–Ω–∏?', reply_markup=sure_markup)
	else:
		await bot.send_chat_action(message.chat.id, 'typing')
		list_result = ['win', 'lose']
		result = random.choice(list_result)
		time.sleep(5)
		if result == 'win':
			new_level = level_user + rate
			if new_level > 50:
				new_level = 50
			await message.answer(f'üéâ –¢—ã –ø–æ–±–µ–¥–∏–ª! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!\n–¢–≤–æ–π –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å ‚Äî <code>{new_level}</code> üéâ', parse_mode='html', reply_markup=games_markup)
			send_to_db('UPDATE subscribers SET level = ? WHERE id = ?', (new_level, int(message.chat.id)))
		else:
			new_level = level_user - rate
			if new_level < 1:
				new_level = 1
			await message.answer(f'üò¢ –ü—Ä–æ—Å—Ç–∏, –Ω–æ —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª\n–¢–≤–æ–π –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å ‚Äî <code>{new_level}</code> üò¢', parse_mode='html', reply_markup=games_markup)
			send_to_db('UPDATE subscribers SET level = ? WHERE id = ?', (new_level, int(message.chat.id)))
	await state.finish()



#—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda c:c.data == 'copy_ref_link')
async def process_callback_button1(callback_query: types.CallbackQuery):
	await bot.answer_callback_query(callback_query.id)
	await bot.send_message(callback_query.from_user.id, f'<code>{result_url}</code>', disable_web_page_preview=True, parse_mode='html')

@dp.callback_query_handler(lambda c:c.data == 'copy_code_coupon')
async def process_callback_button2(callback_query: types.CallbackQuery):
	await bot.answer_callback_query(callback_query.id)
	profile_markup = create_keyboard(['üóí –ú–æ–∏ –∫—É–ø–æ–Ω—ã', '‚Ü© –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'], 2)
	await bot.send_message(callback_query.from_user.id, f'<code>{new_code}</code>', parse_mode='html', reply_markup=profile_markup)

@dp.callback_query_handler(lambda c:c.data == 'close_list')
async def process_callback_button3(callback_query: types.CallbackQuery):
	await bot.answer_callback_query(callback_query.id)
	profile_markup = create_keyboard(['üóí –ú–æ–∏ –∫—É–ø–æ–Ω—ã', '‚Ü© –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'], 2)
	await bot.send_message(callback_query.from_user.id, '–ó–∞–∫—Ä—ã–≤–∞—é...', reply_markup=profile_markup)

@dp.callback_query_handler(lambda c:c.data == 'use_coupon')
async def process_callback_button4(callback_query: types.CallbackQuery):
	await bot.answer_callback_query(callback_query.id)
	list_admins = list()
	admins = get_from_db('SELECT * FROM admins', ())
	for admin in admins:
		list_admins.append(admin[0])
	if int(callback_query.from_user.id) in list_admins:
		main_markup = create_keyboard(['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üéÆ –ò–≥—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞', 'üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏', 'üîÅ –ü–µ—Ä–µ–≤–æ–¥ —É—Ä–æ–≤–Ω—è –≤ —Å–∫–∏–¥–∫–∏', 'üìÑ –ü—Ä–∞–≤–∏–ª–∞', '‚òëÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É–ø–æ–Ω', 'üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º'], 2)
	else:
		main_markup = create_keyboard(['üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üéÆ –ò–≥—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—ã—Ç–∞', 'üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏', 'üîÅ –ü–µ—Ä–µ–≤–æ–¥ —É—Ä–æ–≤–Ω—è –≤ —Å–∫–∏–¥–∫–∏', 'üìÑ –ü—Ä–∞–≤–∏–ª–∞'], 2)
	send_to_db('DELETE FROM coupons WHERE id = ?', (coupon_id, ))
	await bot.send_message(callback_query.from_user.id, '–ö—É–ø–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω', reply_markup=main_markup)

@dp.callback_query_handler(lambda c:c.data == 'yes_sure')
async def process_callback_button45(callback_query: types.CallbackQuery):
	await bot.answer_callback_query(callback_query.id)
	await bot.send_chat_action(callback_query.from_user.id, 'typing')
	list_result = ['win', 'lose']
	result = random.choice(list_result)
	time.sleep(5)
	if result == 'win':
		new_level = level_user + rate
		if new_level > 50:
			new_level = 50
		await bot.send_message(callback_query.from_user.id, f'üéâ –¢—ã –ø–æ–±–µ–¥–∏–ª! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!\n–¢–≤–æ–π –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å ‚Äî <code>{new_level}</code> üéâ', parse_mode='html', reply_markup=games_markup)
		send_to_db('UPDATE subscribers SET level = ? WHERE id = ?', (new_level, int(callback_query.from_user.id)))
	else:
		new_level = level_user - rate
		if new_level < 1:
			new_level = 1
		await bot.send_message(callback_query.from_user.id, f'üò¢ –ü—Ä–æ—Å—Ç–∏, –Ω–æ —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª\n–¢–≤–æ–π –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å ‚Äî <code>{new_level}</code> üò¢', parse_mode='html', reply_markup=games_markup)
		send_to_db('UPDATE subscribers SET level = ? WHERE id = ?', (new_level, int(callback_query.from_user.id)))

@dp.callback_query_handler(lambda c:c.data == 'no_sure')
async def process_callback_button45(callback_query: types.CallbackQuery):
	await bot.send_message(callback_query.from_user.id, '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä', reply_markup=games_markup)

#–∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
if __name__ == '__main__':
	executor.start_polling(dp, skip_updates=True)